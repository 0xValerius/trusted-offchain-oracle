/// SPDX-License-Identifier: MIT

/*
      .oooo.               oooooo     oooo           oooo                      o8o                       
     d8P'`Y8b               `888.     .8'            `888                      `"'                       
    888    888 oooo    ooo   `888.   .8'    .oooo.    888   .ooooo.  oooo d8b oooo  oooo  oooo   .oooo.o 
    888    888  `88b..8P'     `888. .8'    `P  )88b   888  d88' `88b `888""8P `888  `888  `888  d88(  "8 
    888    888    Y888'        `888.8'      .oP"888   888  888ooo888  888      888   888   888  `"Y88b.  
    `88b  d88'  .o8"'88b        `888'      d8(  888   888  888    .o  888      888   888   888  o.  )88b 
     `Y8bd8P'  o88'   888o       `8'       `Y888""8o o888o `Y8bod8P' d888b    o888o  `V88V"V8P' 8""888P' 
*/

pragma solidity ^0.8.17;

import {OracleVerifier} from "../src/OracleVerifier.sol";

/**
 * @title MockOracle
 * @author 0xValerius
 * @notice This contract is for testing purposes and should not be used in a live/mainnet environment.
 * @dev A mock implementation of the OracleVerifier.sol abstract contract. This contract is mainly used for testing the OracleVerifier functionality. It has the ability to update a price and a text variable upon successful verification of the oracle's data and signature.
 */
contract MockOracle is OracleVerifier {
    /**
     * @dev State variable storing the latest price updated by the off-chain oracle. It is public and can be accessed by anyone.
     */
    uint256 public price;

    /**
     * @dev State variable storing the latest text message updated by the off-chain oracle. It is public and can be accessed by anyone.
     */
    string public text;

    /**
     * @notice This function is public and can be called by anyone. However, it will only update the price and text if the provided data and signature pass the verification process.
     * @dev This function updates the price and text variables after verifying the oracle's data, timestamp, and signature.
     * @param data The raw data (price and text) received from the oracle.
     * @param timestamp The timestamp at which the data was generated.
     * @param messageHash The hash of the data and the timestamp.
     * @param signature The signature generated by the off-chain oracle using its private key.
     */
    function updateData(bytes memory data, uint256 timestamp, bytes32 messageHash, bytes memory signature)
        public
        verify(data, timestamp, messageHash, signature)
    {
        (uint256 newPrice, string memory newText) = abi.decode(data, (uint256, string));
        price = newPrice;
        text = newText;
    }
}
