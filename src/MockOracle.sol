/// SPDX-License-Identifier: MIT

pragma solidity ^0.8.17;

import {OracleVerifier} from "../src/OracleVerifier.sol";

/**
 * @title MockOracle
 * @author 0xValerius
 * @notice This contract is for testing purposes and should not be used in a live/mainnet environment.
 * @dev A mock implementation of the OracleVerifier.sol abstract contract. This contract is mainly used for testing the OracleVerifier functionality. It has the ability to update a price and a text variable upon successful verification of the oracle's data and signature.
 */
contract MockOracle is OracleVerifier {
    /**
     * @dev State variable storing the latest price updated by the off-chain oracle. It is public and can be accessed by anyone.
     */
    uint256 public price;

    /**
     * @dev State variable storing the latest text message updated by the off-chain oracle. It is public and can be accessed by anyone.
     */
    string public text;

    /**
     * @notice This function is public and can be called by anyone. However, it will only update the price and text if the provided data and signature pass the verification process.
     * @dev This function updates the price and text variables after verifying the oracle's data, timestamp, and signature.
     * @param data The raw data (price and text) received from the oracle.
     * @param timestamp The timestamp at which the data was generated.
     * @param messageHash The hash of the data and the timestamp.
     * @param signature The signature generated by the off-chain oracle using its private key.
     */
    function updateData(bytes memory data, uint256 timestamp, bytes32 messageHash, bytes memory signature)
        public
        verify(data, timestamp, messageHash, signature)
    {
        (uint256 newPrice, string memory newText) = abi.decode(data, (uint256, string));
        price = newPrice;
        text = newText;
    }
}
